generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ---------------------
// Models
// ---------------------

model User {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime    @default(now())
  email      String      @unique
  password   String
  name       String?
  role       Role        @default(USER)
  deletedAt  DateTime?   // Soft delete

  // Relations
  cartItems  CartItem[]
  orders     Order[]
}

model Product {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  name        String
  description String?
  price       Float
  stock       Int
  imageUrl    String?
  category    Category
  tags        String[]     // For search/filter
  deletedAt   DateTime?    // Soft delete

  // Relations
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

model CartItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity   Int      @default(1)

  // Foreign keys
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId

  product    Product  @relation(fields: [productId], references: [id])
  productId  String   @db.ObjectId
}

model Order {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime     @default(now())
  status      OrderStatus  @default(PENDING)
  total       Float
  couponCode  String?      // Optional discount
  shippingFee Float?       // Optional fee

  // Foreign keys
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @db.ObjectId

  // Relations
  orderItems  OrderItem[]
  address     Address?
}

model OrderItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity   Int      @default(1)
  price      Float

  // Foreign keys
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String   @db.ObjectId

  product    Product  @relation(fields: [productId], references: [id])
  productId  String   @db.ObjectId
}

model Address {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  street    String
  city      String
  state     String
  zipCode   String
  country   String

  // Foreign key
  order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String?  @db.ObjectId
}

model Coupon {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  code       String   @unique
  discount   Float    // e.g. 0.15 for 15%
  expiresAt  DateTime?
  isActive   Boolean  @default(true)
}

// ---------------------
// Enums
// ---------------------

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum Category {
  ELECTRONICS
  CLOTHING
  HOME
  BEAUTY
  SPORTS
  OTHER
}